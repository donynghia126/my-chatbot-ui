// src/App.jsx
import React, { useState, useEffect, useRef } from "react";
import axios from "axios";
import ReactMarkdown from "react-markdown";
import { useTranslation } from "react-i18next"; // Hook ƒë·ªÉ s·ª≠ d·ª•ng i18n
import "./App.css";

function App() {
  // Kh·ªüi t·∫°o hook i18n ƒë·ªÉ l·∫•y h√†m d·ªãch (t) v√† ƒë·ªëi t∆∞·ª£ng i18n (ƒë·ªÉ ƒë·ªïi ng√¥n ng·ªØ)
  const { t, i18n } = useTranslation();

  const [theme, setTheme] = useState("light");

  // === Khai b√°o State ===
  // message: N·ªôi dung tin nh·∫Øn ng∆∞·ªùi d√πng ƒëang g√µ
  const [message, setMessage] = useState("");
  // chatHistory: M·∫£ng l∆∞u tr·ªØ l·ªãch s·ª≠ cu·ªôc tr√≤ chuy·ªán
  const [chatHistory, setChatHistory] = useState([]);
  // isLoading: C·ªù b√°o hi·ªáu ƒëang ch·ªù ph·∫£n h·ªìi t·ª´ AI
  const [isLoading, setIsLoading] = useState(false);

  // Ref ƒë·ªÉ t·ª± ƒë·ªông cu·ªôn xu·ªëng tin nh·∫Øn m·ªõi nh·∫•t
  const chatContainerRef = useRef(null);
  // L·∫•y API URL t·ª´ bi·∫øn m√¥i tr∆∞·ªùng, n·∫øu kh√¥ng c√≥ th√¨ d√πng localhost (cho development)
  const API_BASE_URL = import.meta.env.VITE_API_URL || "http://localhost:3000";

  // === H√†m Thay ƒê·ªïi Ng√¥n Ng·ªØ ===
  const changeLanguage = (event) => {
    const selectedLanguage = event.target.value;
    i18n.changeLanguage(selectedLanguage); // i18next s·∫Ω t·ª± ƒë·ªông t·∫£i file d·ªãch v√† c·∫≠p nh·∫≠t UI
  };
  const toggleTheme = () => {
    const newTheme = theme === "light" ? "dark" : "light";
    setTheme(newTheme);
    // L√°t n·ªØa m√¨nh s·∫Ω l∆∞u newTheme n√†y v√†o localStorage ·ªü m·ªôt b∆∞·ªõc n√¢ng cao h∆°n
  };

  // === useEffect Hook ===
  // T·ª± ƒë·ªông cu·ªôn xu·ªëng cu·ªëi khung chat m·ªói khi chatHistory thay ƒë·ªïi
  useEffect(() => {
    if (chatContainerRef.current) {
      chatContainerRef.current.scrollTop =
        chatContainerRef.current.scrollHeight;
    }
  }, [chatHistory]);
  useEffect(() => {
    document.documentElement.setAttribute("data-theme", theme);
    // Khi theme thay ƒë·ªïi, m√¨nh ƒë·∫∑t attribute 'data-theme' tr√™n th·∫ª <html>
    // CSS c·ªßa m√¨nh (trong index.css) s·∫Ω d·ª±a v√†o attribute n√†y ƒë·ªÉ √°p d·ª•ng ƒë√∫ng b·ªô m√†u
    // V√≠ d·ª•: html[data-theme="dark"] { ...c√°c bi·∫øn m√†u dark... }
    //        :root { ...c√°c bi·∫øn m√†u light... } (m·∫∑c ƒë·ªãnh khi kh√¥ng c√≥ data-theme="dark")
    // ƒê·ªÉ light theme l√† m·∫∑c ƒë·ªãnh khi data-theme kh√¥ng ph·∫£i l√† "dark",
    // m√¨nh c√≥ th·ªÉ ƒë·∫£m b·∫£o x√≥a attribute n·∫øu l√† light, ho·∫∑c ƒë·ªÉ CSS :root x·ª≠ l√Ω.
    // C√°ch ƒë∆°n gi·∫£n l√† lu√¥n set data-theme:
    // document.documentElement.setAttribute('data-theme', theme);
    // V√† trong index.css, m√¨nh s·∫Ω c√≥:
    // html[data-theme="light"] { /* ... light vars ... */ }
    // html[data-theme="dark"] { /* ... dark vars ... */ }
    // Ho·∫∑c, nh∆∞ m√¨nh l√†m: :root cho light, html[data-theme="dark"] cho dark.
    // V·∫≠y th√¨ khi theme l√† 'light', m√¨nh c√≥ th·ªÉ x√≥a attribute 'data-theme'
    // ho·∫∑c ƒë·∫£m b·∫£o CSS :root ƒë∆∞·ª£c ∆∞u ti√™n khi kh√¥ng c√≥ data-theme="dark".

    // C√°ch hi·ªán t·∫°i c·ªßa m√¨nh v·ªõi :root cho light v√† html[data-theme="dark"] cho dark l√†:
    if (theme === "dark") {
      document.documentElement.setAttribute("data-theme", "dark");
    } else {
      // Khi l√† 'light', m√¨nh x√≥a attribute 'data-theme' ƒëi ƒë·ªÉ c√°c bi·∫øn trong :root (light theme) ƒë∆∞·ª£c √°p d·ª•ng
      document.documentElement.removeAttribute("data-theme");
    }
  }, [theme]); // Hook n√†y s·∫Ω ch·∫°y m·ªói khi state 'theme' thay ƒë·ªïi

  // === H√†m X·ª≠ L√Ω G·ª≠i Tin Nh·∫Øn ===
  const handleSendMessage = async (e) => {
    if (e) e.preventDefault(); // NgƒÉn form submit l√†m reload trang
    if (!message.trim()) return; // Kh√¥ng g·ª≠i tin nh·∫Øn r·ªóng

    // T·∫°o object tin nh·∫Øn m·ªõi c·ªßa ng∆∞·ªùi d√πng v·ªõi ID duy nh·∫•t
    const newUserMessage = {
      id: `user-${Date.now()}`,
      sender: "user",
      text: message,
    };

    // Chu·∫©n b·ªã d·ªØ li·ªáu g·ª≠i cho API: bao g·ªìm l·ªãch s·ª≠ chat v√† tin nh·∫Øn m·ªõi c·ªßa ng∆∞·ªùi d√πng.
    // 'role' ph·∫£i l√† "user" ho·∫∑c "model" theo y√™u c·∫ßu c·ªßa Gemini API.
    const apiChatSession = [
      ...chatHistory.map((chatItem) => ({
        role: chatItem.sender === "user" ? "user" : "model", // 'user' cho ng∆∞·ªùi d√πng, 'model' cho AI
        text: chatItem.text,
      })),
      { role: "user", text: newUserMessage.text }, // Tin nh·∫Øn m·ªõi nh·∫•t t·ª´ ng∆∞·ªùi d√πng
    ];

    // C·∫≠p nh·∫≠t UI ngay l·∫≠p t·ª©c v·ªõi tin nh·∫Øn c·ªßa ng∆∞·ªùi d√πng (Optimistic Update)
    setChatHistory((prev) => [...prev, newUserMessage]);
    setMessage(""); // X√≥a n·ªôi dung trong √¥ input
    setIsLoading(true); // B·∫≠t tr·∫°ng th√°i ƒëang t·∫£i

    try {
      // G·ªçi API backend
      const response = await axios.post(`${API_BASE_URL}/api/v1/chat`, {
        chatSession: apiChatSession,
        targetLanguage: i18n.language, // G·ª≠i ng√¥n ng·ªØ hi·ªán t·∫°i ƒë·ªÉ AI tr·∫£ l·ªùi ƒë√∫ng ng√¥n ng·ªØ
      });

      // X·ª≠ l√Ω v√† hi·ªÉn th·ªã ph·∫£n h·ªìi t·ª´ AI
      const aiReply = {
        id: `ai-${Date.now()}`,
        sender: "ai",
        text: response.data.reply,
      };
      setChatHistory((prev) => [...prev, aiReply]);
    } catch (error) {
      // Log l·ªói ra console (c√≥ th·ªÉ d·ªãch key 'errorConsoleLog')
      console.error(t("errorConsoleLog", "L·ªói khi g·ªçi API:"), error);
      let errorMessage = t("errorDefault"); // Th√¥ng b√°o l·ªói m·∫∑c ƒë·ªãnh (ƒë√£ d·ªãch)

      // X·ª≠ l√Ω c√°c lo·∫°i l·ªói c·ª• th·ªÉ h∆°n ƒë·ªÉ c√≥ th√¥ng b√°o th√¢n thi·ªán
      if (error.response && error.response.data && error.response.data.error) {
        errorMessage = error.response.data.error; // L·ªói tr·∫£ v·ªÅ t·ª´ server
      } else if (error.message && error.message.includes("Network Error")) {
        errorMessage = t("errorNetwork"); // L·ªói m·∫°ng (ƒë√£ d·ªãch)
      } else if (error.message) {
        errorMessage = error.message; // C√°c l·ªói kh√°c (hi·ªÉn th·ªã l·ªói g·ªëc t·ª´ JS)
      }

      const errorReply = {
        id: `error-${Date.now()}`,
        sender: "ai", // Hi·ªÉn th·ªã nh∆∞ m·ªôt tin nh·∫Øn t·ª´ AI
        text: errorMessage,
      };
      setChatHistory((prev) => [...prev, errorReply]);
    } finally {
      setIsLoading(false); // T·∫Øt tr·∫°ng th√°i ƒëang t·∫£i d√π th√†nh c√¥ng hay th·∫•t b·∫°i
    }
  };

  // === H√†m X·ª≠ L√Ω G·ª≠i Tin Nh·∫Øn Khi Nh·∫•n Ph√≠m Enter ===
  const handleKeyPress = (e) => {
    if (e.key === "Enter" && !e.shiftKey) {
      // Ch·ªâ g·ª≠i khi nh·∫•n Enter (kh√¥ng ph·∫£i Shift+Enter ƒë·ªÉ xu·ªëng d√≤ng)
      e.preventDefault(); // NgƒÉn h√†nh vi m·∫∑c ƒë·ªãnh c·ªßa Enter l√† xu·ªëng d√≤ng trong textarea
      handleSendMessage();
    }
  };

  // === Ph·∫ßn Render JSX ===
  return (
    <div className="chat-app-container">
      {/* Header c·ªßa ·ª©ng d·ª•ng */}
      <header className="app-header">
        <h1>{t("headerTitle")}</h1>
        <div className="header-controls">
          {" "}
          {/* B·ªçc c·∫£ language switcher v√† theme toggle cho d·ªÖ layout */}
          <div className="language-switcher">
            <select
              value={i18n.language}
              onChange={changeLanguage}
              className="language-select"
            >
              <option value="vi">{t("languages.vi")}</option>
              <option value="en">{t("languages.en")}</option>
              <option value="ja">{t("languages.ja")}</option>
            </select>
          </div>
          {/* === N√öT CHUY·ªÇN THEME M·ªöI === */}
          <button onClick={toggleTheme} className="theme-toggle-button">
            {/* Hi·ªÉn th·ªã icon ho·∫∑c text t√πy theo theme hi·ªán t·∫°i */}
            {theme === "light" ? "üåô " : "‚òÄÔ∏è "}
            {/* S·∫øp c√≥ th·ªÉ d√πng icon th·∫≠t sau n√†y cho ƒë·∫πp h∆°n */}
          </button>
        </div>
      </header>

      {/* Khung hi·ªÉn th·ªã cu·ªôc tr√≤ chuy·ªán */}
      <div className="chat-window" ref={chatContainerRef}>
        {chatHistory.map((chatItem) => (
          <div
            key={chatItem.id} // Key duy nh·∫•t cho React qu·∫£n l√Ω list hi·ªáu qu·∫£
            className={`message-bubble ${
              chatItem.sender === "user" ? "user-message" : "ai-message"
            }`}
          >
            {/* T√™n ng∆∞·ªùi g·ª≠i (d·ªãch theo ng√¥n ng·ªØ ƒë√£ ch·ªçn) */}
            <p className="sender-name">
              <strong>
                {chatItem.sender === "user" ? t("userSender") : t("aiSender")}:
              </strong>
            </p>
            {/* N·ªôi dung tin nh·∫Øn, ƒë∆∞·ª£c render d∆∞·ªõi d·∫°ng Markdown */}
            <div className="markdown-content">
              <ReactMarkdown>{chatItem.text}</ReactMarkdown>
            </div>
          </div>
        ))}
        {/* Hi·ªÉn th·ªã th√¥ng b√°o ƒëang t·∫£i khi ƒëang ch·ªù AI tr·∫£ l·ªùi */}
        {isLoading && (
          <div className="message-bubble ai-message">
            <em>{t("loadingAIMessage")}</em>{" "}
            {/* Th√¥ng b√°o t·∫£i (d·ªãch theo ng√¥n ng·ªØ ƒë√£ ch·ªçn) */}
          </div>
        )}
      </div>

      {/* Form nh·∫≠p li·ªáu v√† g·ª≠i tin nh·∫Øn */}
      <form onSubmit={handleSendMessage} className="message-input-form">
        <textarea
          value={message}
          onChange={(e) => setMessage(e.target.value)}
          onKeyPress={handleKeyPress} // Cho ph√©p g·ª≠i b·∫±ng ph√≠m Enter
          placeholder={t("inputPlaceholder")} // Ch·ªØ g·ª£i √Ω (d·ªãch theo ng√¥n ng·ªØ ƒë√£ ch·ªçn)
          rows="3"
        />
        <button type="submit" disabled={isLoading}>
          {/* Ch·ªØ tr√™n n√∫t g·ª≠i, thay ƒë·ªïi t√πy tr·∫°ng th√°i v√† ng√¥n ng·ªØ */}
          {isLoading ? t("sendingButton") : t("sendButton")}
        </button>
      </form>
    </div>
  );
}

export default App;
