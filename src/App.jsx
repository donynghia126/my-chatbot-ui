// src/App.jsx
import React, { useState, useEffect, useRef } from "react";
import axios from "axios";
import ReactMarkdown from "react-markdown";
import { useTranslation } from "react-i18next"; // Hook ƒë·ªÉ s·ª≠ d·ª•ng i18n
import "./App.css"; // Import CSS cho component App

function App() {
  // Kh·ªüi t·∫°o hook i18n ƒë·ªÉ l·∫•y h√†m d·ªãch (t) v√† ƒë·ªëi t∆∞·ª£ng i18n (ƒë·ªÉ ƒë·ªïi ng√¥n ng·ªØ, l·∫•y ng√¥n ng·ªØ hi·ªán t·∫°i)
  const { t, i18n } = useTranslation();

  // === Khai B√°o State ===
  const [theme, setTheme] = useState("light"); // State cho theme hi·ªán t·∫°i (light/dark), m·∫∑c ƒë·ªãnh l√† 'light'
  const [message, setMessage] = useState(""); // N·ªôi dung tin nh·∫Øn ng∆∞·ªùi d√πng ƒëang g√µ
  const [chatHistory, setChatHistory] = useState([]); // M·∫£ng l∆∞u tr·ªØ l·ªãch s·ª≠ cu·ªôc tr√≤ chuy·ªán
  const [isLoading, setIsLoading] = useState(false); // C·ªù b√°o hi·ªáu ƒëang ch·ªù ph·∫£n h·ªìi t·ª´ AI

  // Ref ƒë·ªÉ t·ª± ƒë·ªông cu·ªôn khung chat xu·ªëng tin nh·∫Øn m·ªõi nh·∫•t
  const chatContainerRef = useRef(null);
  // L·∫•y API URL t·ª´ bi·∫øn m√¥i tr∆∞·ªùng Vite, n·∫øu kh√¥ng c√≥ th√¨ d√πng localhost (cho development)
  const API_BASE_URL = import.meta.env.VITE_API_URL || "http://localhost:3000";

  // === useEffect Hooks ===

  // 1. Thi·∫øt l·∫≠p ng√¥n ng·ªØ m·∫∑c ƒë·ªãnh khi app t·∫£i l·∫ßn ƒë·∫ßu (n·∫øu ch∆∞a c√≥ trong localStorage)
  useEffect(() => {
    const savedLanguage = localStorage.getItem("i18nextLng"); // i18next-browser-languagedetector l∆∞u v√†o ƒë√¢y
    if (!savedLanguage && i18n.language !== "en") {
      // N·∫øu ch∆∞a c√≥ ng√¥n ng·ªØ l∆∞u v√† ng√¥n ng·ªØ hi·ªán t·∫°i kh√¥ng ph·∫£i 'en'
      i18n.changeLanguage("en"); // Th√¨ ƒë·∫∑t m·∫∑c ƒë·ªãnh l√† ti·∫øng Anh
    }
    // N·∫øu ƒë√£ c√≥ savedLanguage, LanguageDetector s·∫Ω t·ª± ƒë·ªông √°p d·ª•ng n√≥ t·ª´ c√°c l·∫ßn t·∫£i sau.
    // i18n.language !== 'en' ƒë·ªÉ tr√°nh g·ªçi changeLanguage kh√¥ng c·∫ßn thi·∫øt n·∫øu detector ƒë√£ set ƒë√∫ng.
  }, [i18n]); // Ch·∫°y khi i18n object s·∫µn s√†ng

  // 2. T·ª± ƒë·ªông cu·ªôn xu·ªëng cu·ªëi khung chat m·ªói khi chatHistory thay ƒë·ªïi
  useEffect(() => {
    if (chatContainerRef.current) {
      chatContainerRef.current.scrollTop =
        chatContainerRef.current.scrollHeight;
    }
  }, [chatHistory]);

  // 3. √Åp d·ª•ng theme (light/dark) v√†o th·∫ª <html> m·ªói khi state 'theme' thay ƒë·ªïi
  useEffect(() => {
    if (theme === "dark") {
      document.documentElement.setAttribute("data-theme", "dark");
    } else {
      document.documentElement.removeAttribute("data-theme"); // :root (light theme) s·∫Ω ƒë∆∞·ª£c √°p d·ª•ng
    }
    // Optional: L∆∞u theme v√†o localStorage ƒë·ªÉ ghi nh·ªõ l·ª±a ch·ªçn c·ªßa ng∆∞·ªùi d√πng
    // localStorage.setItem('theme', theme);
  }, [theme]);

  // === H√†m X·ª≠ L√Ω Logic ===

  // H√†m thay ƒë·ªïi ng√¥n ng·ªØ giao di·ªán
  const changeLanguage = (event) => {
    const selectedLanguage = event.target.value;
    i18n.changeLanguage(selectedLanguage); // i18next t·ª± ƒë·ªông t·∫£i file d·ªãch v√† c·∫≠p nh·∫≠t UI
  };

  // H√†m chuy·ªÉn ƒë·ªïi gi·ªØa light theme v√† dark theme
  const toggleTheme = () => {
    const newTheme = theme === "light" ? "dark" : "light";
    setTheme(newTheme);
  };

  // H√†m x·ª≠ l√Ω g·ª≠i tin nh·∫Øn
  const handleSendMessage = async (e) => {
    if (e) e.preventDefault(); // NgƒÉn form submit l√†m reload trang
    if (!message.trim()) return; // Kh√¥ng g·ª≠i tin nh·∫Øn r·ªóng

    const newUserMessage = {
      id: `user-${Date.now()}`,
      sender: "user",
      text: message,
    };

    // Chu·∫©n b·ªã session chat g·ª≠i cho API (bao g·ªìm l·ªãch s·ª≠ v√† tin nh·∫Øn m·ªõi)
    // 'role' ph·∫£i l√† "user" ho·∫∑c "model" theo chu·∫©n Gemini API
    const apiChatSession = [
      ...chatHistory.map((chatItem) => ({
        role: chatItem.sender === "user" ? "user" : "model",
        text: chatItem.text,
      })),
      { role: "user", text: newUserMessage.text },
    ];

    setChatHistory((prev) => [...prev, newUserMessage]); // C·∫≠p nh·∫≠t UI v·ªõi tin nh·∫Øn m·ªõi c·ªßa ng∆∞·ªùi d√πng
    setMessage(""); // X√≥a n·ªôi dung √¥ input
    setIsLoading(true); // B·∫≠t tr·∫°ng th√°i ƒëang t·∫£i

    try {
      const response = await axios.post(`${API_BASE_URL}/api/v1/chat`, {
        chatSession: apiChatSession,
        targetLanguage: i18n.language, // G·ª≠i ng√¥n ng·ªØ hi·ªán t·∫°i ƒë·ªÉ AI tr·∫£ l·ªùi ƒë√∫ng ng√¥n ng·ªØ
      });

      const aiReply = {
        id: `ai-${Date.now()}`,
        sender: "ai",
        text: response.data.reply,
      };
      setChatHistory((prev) => [...prev, aiReply]);
    } catch (error) {
      console.error(t("errorConsoleLog", "L·ªói khi g·ªçi API:"), error);
      let errorMessage = t("errorDefault");
      if (error.response && error.response.data && error.response.data.error) {
        errorMessage = error.response.data.error;
      } else if (error.message && error.message.includes("Network Error")) {
        errorMessage = t("errorNetwork");
      } else if (error.message) {
        errorMessage = error.message;
      }
      const errorReply = {
        id: `error-${Date.now()}`,
        sender: "ai",
        text: errorMessage,
      };
      setChatHistory((prev) => [...prev, errorReply]);
    } finally {
      setIsLoading(false); // T·∫Øt tr·∫°ng th√°i ƒëang t·∫£i
    }
  };

  // H√†m x·ª≠ l√Ω g·ª≠i tin nh·∫Øn khi nh·∫•n ph√≠m Enter
  const handleKeyPress = (e) => {
    if (e.key === "Enter" && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  };

  // === Ph·∫ßn Render Giao Di·ªán JSX ===
  return (
    <div className="chat-app-container">
      <header className="app-header">
        {/* Ti√™u ƒë·ªÅ ·ª©ng d·ª•ng, c√≥ link v·ªÅ trang ch·ªß */}
        <a href="/" className="header-link">
          <h1>{t("headerTitle")}</h1>
        </a>
        {/* C·ª•m ƒëi·ªÅu khi·ªÉn ng√¥n ng·ªØ v√† theme */}
        <div className="header-controls">
          <div className="language-switcher">
            <select
              value={i18n.language}
              onChange={changeLanguage}
              className="language-select"
              title={t("languageSelectorTitle", "Ch·ªçn ng√¥n ng·ªØ hi·ªÉn th·ªã")} // Th√™m title cho d·ªÖ hi·ªÉu
            >
              <option value="en">{t("languages.en")}</option>
              <option value="vi">{t("languages.vi")}</option>
              <option value="ja">{t("languages.ja")}</option>
            </select>
          </div>
          {/* N√∫t chuy·ªÉn ƒë·ªïi S√°ng/T·ªëi */}
          <button
            onClick={toggleTheme}
            className="theme-toggle-button"
            title={t("themeToggleButtonTitle", "Chuy·ªÉn ƒë·ªïi giao di·ªán S√°ng/T·ªëi")} // Th√™m title
          >
            {theme === "light" ? "üåô" : "‚òÄÔ∏è"}{" "}
            {/* Icon emoji thay ƒë·ªïi theo theme */}
          </button>
        </div>
      </header>

      {/* Khung hi·ªÉn th·ªã cu·ªôc tr√≤ chuy·ªán */}
      <div className="chat-window" ref={chatContainerRef}>
        {chatHistory.map((chatItem) => (
          <div
            key={chatItem.id}
            className={`message-bubble ${
              chatItem.sender === "user" ? "user-message" : "ai-message"
            }`}
          >
            <p className="sender-name">
              <strong>
                {chatItem.sender === "user" ? t("userSender") : t("aiSender")}:
              </strong>
            </p>
            <div className="markdown-content">
              <ReactMarkdown>{chatItem.text}</ReactMarkdown>
            </div>
          </div>
        ))}
        {/* Th√¥ng b√°o ƒëang t·∫£i */}
        {isLoading && (
          <div className="message-bubble ai-message">
            <em>{t("loadingAIMessage")}</em>
          </div>
        )}
      </div>

      {/* Form nh·∫≠p li·ªáu v√† g·ª≠i tin nh·∫Øn */}
      <form onSubmit={handleSendMessage} className="message-input-form">
        <textarea
          value={message}
          onChange={(e) => setMessage(e.target.value)}
          onKeyPress={handleKeyPress}
          placeholder={t("inputPlaceholder")}
          rows="3"
        />
        <button type="submit" disabled={isLoading} title={t("sendButton")}>
          {/* Icon cho n√∫t g·ª≠i, thay ƒë·ªïi t√πy tr·∫°ng th√°i */}
          {isLoading ? "..." : "‚û¢"}{" "}
          {/* "..." khi ƒëang t·∫£i, "‚û¢" (ho·∫∑c ‚úàÔ∏è) khi b√¨nh th∆∞·ªùng */}
        </button>
      </form>
    </div>
  );
}

export default App;
